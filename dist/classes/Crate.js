"use strict";var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = undefined;var _classCallCheck2 = require("@babel/runtime/helpers/classCallCheck");var _classCallCheck = (0, _interopRequireDefault2["default"])(_classCallCheck2)["default"];var _createClass2 = require("@babel/runtime/helpers/createClass");var _createClass = (0, _interopRequireDefault2["default"])(_createClass2)["default"];var _os = require("os");var os = (0, _interopRequireDefault2["default"])(_os)["default"];
var _fs = require("fs");var fs = (0, _interopRequireDefault2["default"])(_fs)["default"];
var _path = require("path");var path = (0, _interopRequireDefault2["default"])(_path)["default"];
var _async = require("async");var async = (0, _interopRequireDefault2["default"])(_async)["default"];
var _checkTypes = require("check-types");var check = (0, _interopRequireDefault2["default"])(_checkTypes)["default"];
var _lodash = require("lodash");var lodash = (0, _interopRequireDefault2["default"])(_lodash)["default"];
var _FileProcessor = require("./FileProcessor");var FileProcessor = (0, _interopRequireDefault2["default"])(_FileProcessor)["default"];
var _underscore = require("underscore");var _ = (0, _interopRequireDefault2["default"])(_underscore)["default"];
var _LocalFsStorageProvider = require("./LocalFsStorageProvider");var LocalFsStorageProvider = (0, _interopRequireDefault2["default"])(_LocalFsStorageProvider)["default"];var

Crate = /*#__PURE__*/function () {
  function Crate() {_classCallCheck(this, Crate);
  }_createClass(Crate, [{ key: "_addFields", value: function _addFields(

    schema, options) {
      var fields = {};
      Object.keys(options.fields).forEach(function (field) {
        fields[field] = options.fields[field].processor.createFieldSchema();

        if (options.fields[field].array) {
          fields[field] = [fields[field]];
        }
      });
      schema.add(fields);
    } }, { key: "_validateOptions", value: function _validateOptions(

    options) {
      check.assert.object(options, 'No options were specified!');
      check.assert.object(options.fields, 'No fields were specified!');

      if (!options.tempDir) {
        options.tempDir = os.tmpdir();
      }

      Object.keys(options.fields).forEach(function (field) {
        if (!options.fields[field].processor) {
          options.fields[field].processor = new FileProcessor();
        } else if (_.isFunction(options.fields[field].processor)) {
          var Processor = options.fields[field].processor;
          options.fields[field].processor = new Processor(new LocalFsStorageProvider());
        }

        check.assert["function"](options.fields[field].processor.createFieldSchema, 'FileProcessor object should implement the createFieldSchema method!');
        check.assert["function"](options.fields[field].processor.willOverwrite, 'FileProcessor object should implement the willOverwrite method!');
        check.assert["function"](options.fields[field].processor.process, 'FileProcessor object should implement the process method!');
        check.assert["function"](options.fields[field].processor.remove, 'FileProcessor object should implement the remove method!');
      });
    } }, { key: "plugin", value: function plugin(

    schema, options) {
      this._validateOptions(options);
      this._addFields(schema, options);

      schema.methods.attach = function (field, attachment, callback) {
        if (!options.fields[field]) {
          var error = new Error('Field "' + field + '" was not registered as an attachment property');
          if (callback) {
            return callback(error);
          }
          return Promise.reject(error);
        }
        if (!attachment || !attachment.path && !attachment.buffer && !attachment.stream) {
          var _error = new Error('Attachment has no path|buffer|stream property!');
          if (callback) {
            return callback(_error);
          }
          return Promise.reject(_error);
        }

        var model = this;
        var modelArray;

        if (options.fields[field].array) {
          modelArray = lodash.get(model, field, undefined);
          model = {};
          lodash.set(model, field, this[field].create());
        }

        // the things we will do to the file
        var tasks = [];
        attachment.date = new Date();
        // make sure the file actually exists
        if (attachment.path) {
          tasks.push(function (next) {
            fs.exists(attachment.path, function (result) {
              next(!result ? new Error('No file exists at ' + attachment.path) : undefined);
            });
          });
        }

        // make sure there's an original name
        if (!attachment.name && attachment.path) {
          tasks.push(function (next) {
            attachment.name = path.basename(attachment.path);
            next();
          });
        }

        // get the filesize
        if (!attachment.size) {
          if (attachment.path) {
            tasks.push(function (next) {
              fs.stat(attachment.path, function (error, stats) {
                attachment.size = stats.size;
                next(error);
              });
            });
          } else if (attachment.buffer) {
            tasks.push(function (next) {
              attachment.size = attachment.buffer.length;
              next();
            });
          }
        }

        // remove the old file if one already exists
        if (options.fields[field].processor.willOverwrite(lodash.get(model, field, undefined))) {
          tasks.push(function (next) {
            options.fields[field].processor.remove(lodash.get(model, field, undefined), next);
          });
        }

        // process the attachment
        tasks.push(function (next) {
          options.fields[field].processor.process(model, attachment, lodash.get(model, field, undefined), next);
        });

        var attach = function attach(next) {
          async.series(tasks, function (error) {
            if (error) {
              return next(error);
            }

            if (options.fields[field].array) {
              modelArray.push(lodash.get(model, field, undefined));
            }

            next();
          });
        };

        if (!callback) {
          return new Promise(function (resolve, reject) {
            attach(function (error) {
              if (error) {
                return reject(error);
              }
              resolve();
            });
          });
        }
        attach(callback);
      };

      // register a hook to clean up files before models are deleted
      schema.pre('remove', function (next) {
        var model = this;
        var tasks = [];
        Object.keys(options.fields).forEach(function (field) {
          if (options.fields[field].array) {
            lodash.get(model, field, []).forEach(function (arrayField) {
              tasks.push(function (callback) {
                options.fields[field].processor.remove(arrayField, callback);
              });
            });
          } else {
            tasks.push(function (callback) {
              options.fields[field].processor.remove(lodash.get(model, field, undefined), callback);
            });
          }
        });
        async.parallel(tasks, function (error) {
          next(error);
        });
      });

      schema.virtual('__cached_attachments').get(function () {
        return this.___cached_attachments;
      });

      schema.virtual('__cached_attachments').set(function (value) {
        this.___cached_attachments = value;
      });

      // store a copy of every attachment property
      schema.post('init', function (doc) {
        var model = doc.toObject();
        doc.__cached_attachments = {};

        Object.keys(options.fields).forEach(function (field) {
          if (lodash.get(model, field, undefined)) {
            doc.__cached_attachments[field] = JSON.parse(JSON.stringify(lodash.get(model, field, undefined)));
          }
        });
      });

      // before saving, tidy up any attachments that have been deleted
      schema.pre('save', function (next) {
        var model = this;
        var tasks = [];

        if (!model.__cached_attachments) {
          return next();
        }

        Object.keys(options.fields).forEach(function (field) {
          if (!model.__cached_attachments[field]) {
            return;
          }
          if (options.fields[field].array) {
            // deal with attachments that have been deleted from arrays
            model.__cached_attachments[field].forEach(function (oldDoc) {
              var present = false;

              lodash.get(model, field, []).forEach(function (currentDoc) {
                if (currentDoc._id.equals(oldDoc._id)) {
                  present = true;
                }
              });

              if (!present) {
                // subDocument has been removed, delete the attachment
                tasks.push(function (callback) {
                  options.fields[field].processor.remove(oldDoc, callback);
                });
              }
            });
          } else if (model.isModified(field)) {
            // if the attachment has been modified and there was an old one, remove the old version
            tasks.push(function (callback) {
              options.fields[field].processor.remove(model.__cached_attachments[field], callback);
            });
          }
        });

        async.parallel(tasks, function (error) {
          next(error);
        });
      });
    } }]);return Crate;}();exports["default"] = Crate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGFzc2VzL0NyYXRlLmpzIl0sIm5hbWVzIjpbIm9zIiwiZnMiLCJwYXRoIiwiYXN5bmMiLCJjaGVjayIsImxvZGFzaCIsIkZpbGVQcm9jZXNzb3IiLCJfIiwiTG9jYWxGc1N0b3JhZ2VQcm92aWRlciIsIkNyYXRlIiwic2NoZW1hIiwib3B0aW9ucyIsImZpZWxkcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwiZmllbGQiLCJwcm9jZXNzb3IiLCJjcmVhdGVGaWVsZFNjaGVtYSIsImFycmF5IiwiYWRkIiwiYXNzZXJ0Iiwib2JqZWN0IiwidGVtcERpciIsInRtcGRpciIsImlzRnVuY3Rpb24iLCJQcm9jZXNzb3IiLCJ3aWxsT3ZlcndyaXRlIiwicHJvY2VzcyIsInJlbW92ZSIsIl92YWxpZGF0ZU9wdGlvbnMiLCJfYWRkRmllbGRzIiwibWV0aG9kcyIsImF0dGFjaCIsImF0dGFjaG1lbnQiLCJjYWxsYmFjayIsImVycm9yIiwiRXJyb3IiLCJQcm9taXNlIiwicmVqZWN0IiwiYnVmZmVyIiwic3RyZWFtIiwibW9kZWwiLCJtb2RlbEFycmF5IiwiZ2V0IiwidW5kZWZpbmVkIiwic2V0IiwiY3JlYXRlIiwidGFza3MiLCJkYXRlIiwiRGF0ZSIsInB1c2giLCJuZXh0IiwiZXhpc3RzIiwicmVzdWx0IiwibmFtZSIsImJhc2VuYW1lIiwic2l6ZSIsInN0YXQiLCJzdGF0cyIsImxlbmd0aCIsInNlcmllcyIsInJlc29sdmUiLCJwcmUiLCJhcnJheUZpZWxkIiwicGFyYWxsZWwiLCJ2aXJ0dWFsIiwiX19fY2FjaGVkX2F0dGFjaG1lbnRzIiwidmFsdWUiLCJwb3N0IiwiZG9jIiwidG9PYmplY3QiLCJfX2NhY2hlZF9hdHRhY2htZW50cyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIm9sZERvYyIsInByZXNlbnQiLCJjdXJyZW50RG9jIiwiX2lkIiwiZXF1YWxzIiwiaXNNb2RpZmllZCJdLCJtYXBwaW5ncyI6InltQkFBQSx3QixJQUFP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QWhDLFFBQUFBLEtBQUssQ0FBQzhELFFBQU4sQ0FBZWpCLEtBQWYsRUFBc0IsVUFBQ1osS0FBRCxFQUFXO0FBQzdCZ0IsVUFBQUEsSUFBSSxDQUFDaEIsS0FBRCxDQUFKO0FBQ0gsU0FGRDtBQUdILE9BekNEO0FBMENILEssMkNBck9nQjNCLEsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGFzeW5jIGZyb20gJ2FzeW5jJztcbmltcG9ydCBjaGVjayBmcm9tICdjaGVjay10eXBlcyc7XG5pbXBvcnQgbG9kYXNoIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgRmlsZVByb2Nlc3NvciBmcm9tICcuL0ZpbGVQcm9jZXNzb3InO1xuaW1wb3J0IF8gZnJvbSAndW5kZXJzY29yZSc7XG5pbXBvcnQgTG9jYWxGc1N0b3JhZ2VQcm92aWRlciBmcm9tICcuL0xvY2FsRnNTdG9yYWdlUHJvdmlkZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENyYXRlIHtcbiAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgfVxuXG4gICAgX2FkZEZpZWxkcyAoc2NoZW1hLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkcyA9IHt9XG4gICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMuZmllbGRzKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgZmllbGRzW2ZpZWxkXSA9IG9wdGlvbnMuZmllbGRzW2ZpZWxkXS5wcm9jZXNzb3IuY3JlYXRlRmllbGRTY2hlbWEoKVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5maWVsZHNbZmllbGRdLmFycmF5KSB7XG4gICAgICAgICAgICAgICAgZmllbGRzW2ZpZWxkXSA9IFtmaWVsZHNbZmllbGRdXVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBzY2hlbWEuYWRkKGZpZWxkcylcbiAgICB9XG5cbiAgICBfdmFsaWRhdGVPcHRpb25zIChvcHRpb25zKSB7XG4gICAgICAgIGNoZWNrLmFzc2VydC5vYmplY3Qob3B0aW9ucywgJ05vIG9wdGlvbnMgd2VyZSBzcGVjaWZpZWQhJylcbiAgICAgICAgY2hlY2suYXNzZXJ0Lm9iamVjdChvcHRpb25zLmZpZWxkcywgJ05vIGZpZWxkcyB3ZXJlIHNwZWNpZmllZCEnKVxuXG4gICAgICAgIGlmICghb3B0aW9ucy50ZW1wRGlyKSB7XG4gICAgICAgICAgICBvcHRpb25zLnRlbXBEaXIgPSBvcy50bXBkaXIoKVxuICAgICAgICB9XG5cbiAgICAgICAgT2JqZWN0LmtleXMob3B0aW9ucy5maWVsZHMpLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZmllbGRzW2ZpZWxkXS5wcm9jZXNzb3IpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmZpZWxkc1tmaWVsZF0ucHJvY2Vzc29yID0gbmV3IEZpbGVQcm9jZXNzb3IoKVxuICAgICAgICAgICAgfWVsc2UgaWYoXy5pc0Z1bmN0aW9uKG9wdGlvbnMuZmllbGRzW2ZpZWxkXS5wcm9jZXNzb3IpKXtcbiAgICAgICAgICAgICAgICBjb25zdCBQcm9jZXNzb3IgPSBvcHRpb25zLmZpZWxkc1tmaWVsZF0ucHJvY2Vzc29yO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRzW2ZpZWxkXS5wcm9jZXNzb3IgPSBuZXcgUHJvY2Vzc29yKG5ldyBMb2NhbEZzU3RvcmFnZVByb3ZpZGVyKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGVjay5hc3NlcnQuZnVuY3Rpb24ob3B0aW9ucy5maWVsZHNbZmllbGRdLnByb2Nlc3Nvci5jcmVhdGVGaWVsZFNjaGVtYSwgJ0ZpbGVQcm9jZXNzb3Igb2JqZWN0IHNob3VsZCBpbXBsZW1lbnQgdGhlIGNyZWF0ZUZpZWxkU2NoZW1hIG1ldGhvZCEnKVxuICAgICAgICAgICAgY2hlY2suYXNzZXJ0LmZ1bmN0aW9uKG9wdGlvbnMuZmllbGRzW2ZpZWxkXS5wcm9jZXNzb3Iud2lsbE92ZXJ3cml0ZSwgJ0ZpbGVQcm9jZXNzb3Igb2JqZWN0IHNob3VsZCBpbXBsZW1lbnQgdGhlIHdpbGxPdmVyd3JpdGUgbWV0aG9kIScpXG4gICAgICAgICAgICBjaGVjay5hc3NlcnQuZnVuY3Rpb24ob3B0aW9ucy5maWVsZHNbZmllbGRdLnByb2Nlc3Nvci5wcm9jZXNzLCAnRmlsZVByb2Nlc3NvciBvYmplY3Qgc2hvdWxkIGltcGxlbWVudCB0aGUgcHJvY2VzcyBtZXRob2QhJylcbiAgICAgICAgICAgIGNoZWNrLmFzc2VydC5mdW5jdGlvbihvcHRpb25zLmZpZWxkc1tmaWVsZF0ucHJvY2Vzc29yLnJlbW92ZSwgJ0ZpbGVQcm9jZXNzb3Igb2JqZWN0IHNob3VsZCBpbXBsZW1lbnQgdGhlIHJlbW92ZSBtZXRob2QhJylcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBwbHVnaW4gKHNjaGVtYSwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLl92YWxpZGF0ZU9wdGlvbnMob3B0aW9ucylcbiAgICAgICAgdGhpcy5fYWRkRmllbGRzKHNjaGVtYSwgb3B0aW9ucylcblxuICAgICAgICBzY2hlbWEubWV0aG9kcy5hdHRhY2ggPSBmdW5jdGlvbiAoZmllbGQsIGF0dGFjaG1lbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZmllbGRzW2ZpZWxkXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKCdGaWVsZCBcIicgKyBmaWVsZCArICdcIiB3YXMgbm90IHJlZ2lzdGVyZWQgYXMgYW4gYXR0YWNobWVudCBwcm9wZXJ0eScpXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnJvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhdHRhY2htZW50IHx8ICghYXR0YWNobWVudC5wYXRoICYmICFhdHRhY2htZW50LmJ1ZmZlciAmJiAhYXR0YWNobWVudC5zdHJlYW0pKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0F0dGFjaG1lbnQgaGFzIG5vIHBhdGh8YnVmZmVyfHN0cmVhbSBwcm9wZXJ0eSEnKVxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyb3IpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IG1vZGVsID0gdGhpc1xuICAgICAgICAgICAgbGV0IG1vZGVsQXJyYXlcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZmllbGRzW2ZpZWxkXS5hcnJheSkge1xuICAgICAgICAgICAgICAgIG1vZGVsQXJyYXkgPSBsb2Rhc2guZ2V0KG1vZGVsLCBmaWVsZCwgdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIG1vZGVsID0ge31cbiAgICAgICAgICAgICAgICBsb2Rhc2guc2V0KG1vZGVsLCBmaWVsZCwgdGhpc1tmaWVsZF0uY3JlYXRlKCkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRoZSB0aGluZ3Mgd2Ugd2lsbCBkbyB0byB0aGUgZmlsZVxuICAgICAgICAgICAgY29uc3QgdGFza3MgPSBbXVxuICAgICAgICAgICAgYXR0YWNobWVudC5kYXRlID0gbmV3IERhdGUoKVxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBmaWxlIGFjdHVhbGx5IGV4aXN0c1xuICAgICAgICAgICAgaWYgKGF0dGFjaG1lbnQucGF0aCkge1xuICAgICAgICAgICAgICAgIHRhc2tzLnB1c2gobmV4dCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZzLmV4aXN0cyhhdHRhY2htZW50LnBhdGgsIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoIXJlc3VsdCA/IG5ldyBFcnJvcignTm8gZmlsZSBleGlzdHMgYXQgJyArIGF0dGFjaG1lbnQucGF0aCkgOiB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWFrZSBzdXJlIHRoZXJlJ3MgYW4gb3JpZ2luYWwgbmFtZVxuICAgICAgICAgICAgaWYgKCFhdHRhY2htZW50Lm5hbWUgJiYgYXR0YWNobWVudC5wYXRoKSB7XG4gICAgICAgICAgICAgICAgdGFza3MucHVzaChuZXh0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudC5uYW1lID0gcGF0aC5iYXNlbmFtZShhdHRhY2htZW50LnBhdGgpXG4gICAgICAgICAgICAgICAgICAgIG5leHQoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGdldCB0aGUgZmlsZXNpemVcbiAgICAgICAgICAgIGlmICghYXR0YWNobWVudC5zaXplKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dGFjaG1lbnQucGF0aCkge1xuICAgICAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKG5leHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZnMuc3RhdChhdHRhY2htZW50LnBhdGgsIChlcnJvciwgc3RhdHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50LnNpemUgPSBzdGF0cy5zaXplXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRhY2htZW50LmJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKG5leHQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNobWVudC5zaXplID0gYXR0YWNobWVudC5idWZmZXIubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KClcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgb2xkIGZpbGUgaWYgb25lIGFscmVhZHkgZXhpc3RzXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5maWVsZHNbZmllbGRdLnByb2Nlc3Nvci53aWxsT3ZlcndyaXRlKGxvZGFzaC5nZXQobW9kZWwsIGZpZWxkLCB1bmRlZmluZWQpKSkge1xuICAgICAgICAgICAgICAgIHRhc2tzLnB1c2gobmV4dCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRzW2ZpZWxkXS5wcm9jZXNzb3IucmVtb3ZlKGxvZGFzaC5nZXQobW9kZWwsIGZpZWxkLCB1bmRlZmluZWQpLCBuZXh0KVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHByb2Nlc3MgdGhlIGF0dGFjaG1lbnRcbiAgICAgICAgICAgIHRhc2tzLnB1c2gobmV4dCA9PiB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZHNbZmllbGRdLnByb2Nlc3Nvci5wcm9jZXNzKG1vZGVsLGF0dGFjaG1lbnQsIGxvZGFzaC5nZXQobW9kZWwsIGZpZWxkLCB1bmRlZmluZWQpLCBuZXh0KVxuICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgY29uc3QgYXR0YWNoID0gbmV4dCA9PiB7XG4gICAgICAgICAgICAgICAgYXN5bmMuc2VyaWVzKHRhc2tzLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZpZWxkc1tmaWVsZF0uYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsQXJyYXkucHVzaChsb2Rhc2guZ2V0KG1vZGVsLCBmaWVsZCwgdW5kZWZpbmVkKSlcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5leHQoKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhdHRhY2goKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF0dGFjaChjYWxsYmFjaylcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlZ2lzdGVyIGEgaG9vayB0byBjbGVhbiB1cCBmaWxlcyBiZWZvcmUgbW9kZWxzIGFyZSBkZWxldGVkXG4gICAgICAgIHNjaGVtYS5wcmUoJ3JlbW92ZScsIGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXNcbiAgICAgICAgICAgIGNvbnN0IHRhc2tzID0gW11cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMuZmllbGRzKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmZpZWxkc1tmaWVsZF0uYXJyYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9kYXNoLmdldChtb2RlbCwgZmllbGQsIFtdKS5mb3JFYWNoKChhcnJheUZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRzW2ZpZWxkXS5wcm9jZXNzb3IucmVtb3ZlKGFycmF5RmllbGQsIGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZHNbZmllbGRdLnByb2Nlc3Nvci5yZW1vdmUobG9kYXNoLmdldChtb2RlbCwgZmllbGQsIHVuZGVmaW5lZCksIGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBhc3luYy5wYXJhbGxlbCh0YXNrcywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgbmV4dChlcnJvcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgc2NoZW1hLnZpcnR1YWwoJ19fY2FjaGVkX2F0dGFjaG1lbnRzJykuZ2V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fX2NhY2hlZF9hdHRhY2htZW50c1xuICAgICAgICB9KVxuXG4gICAgICAgIHNjaGVtYS52aXJ0dWFsKCdfX2NhY2hlZF9hdHRhY2htZW50cycpLnNldChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX19fY2FjaGVkX2F0dGFjaG1lbnRzID0gdmFsdWVcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBzdG9yZSBhIGNvcHkgb2YgZXZlcnkgYXR0YWNobWVudCBwcm9wZXJ0eVxuICAgICAgICBzY2hlbWEucG9zdCgnaW5pdCcsIChkb2MpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGVsID0gZG9jLnRvT2JqZWN0KClcbiAgICAgICAgICAgIGRvYy5fX2NhY2hlZF9hdHRhY2htZW50cyA9IHt9XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMuZmllbGRzKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChsb2Rhc2guZ2V0KG1vZGVsLCBmaWVsZCwgdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICBkb2MuX19jYWNoZWRfYXR0YWNobWVudHNbZmllbGRdID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShsb2Rhc2guZ2V0KG1vZGVsLCBmaWVsZCwgdW5kZWZpbmVkKSkpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBiZWZvcmUgc2F2aW5nLCB0aWR5IHVwIGFueSBhdHRhY2htZW50cyB0aGF0IGhhdmUgYmVlbiBkZWxldGVkXG4gICAgICAgIHNjaGVtYS5wcmUoJ3NhdmUnLCBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzXG4gICAgICAgICAgICBjb25zdCB0YXNrcyA9IFtdXG5cbiAgICAgICAgICAgIGlmICghbW9kZWwuX19jYWNoZWRfYXR0YWNobWVudHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMuZmllbGRzKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghbW9kZWwuX19jYWNoZWRfYXR0YWNobWVudHNbZmllbGRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5maWVsZHNbZmllbGRdLmFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGRlYWwgd2l0aCBhdHRhY2htZW50cyB0aGF0IGhhdmUgYmVlbiBkZWxldGVkIGZyb20gYXJyYXlzXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLl9fY2FjaGVkX2F0dGFjaG1lbnRzW2ZpZWxkXS5mb3JFYWNoKChvbGREb2MpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwcmVzZW50ID0gZmFsc2VcblxuICAgICAgICAgICAgICAgICAgICAgICAgbG9kYXNoLmdldChtb2RlbCwgZmllbGQsIFtdKS5mb3JFYWNoKChjdXJyZW50RG9jKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnREb2MuX2lkLmVxdWFscyhvbGREb2MuX2lkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50ID0gdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJlc2VudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN1YkRvY3VtZW50IGhhcyBiZWVuIHJlbW92ZWQsIGRlbGV0ZSB0aGUgYXR0YWNobWVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhc2tzLnB1c2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmllbGRzW2ZpZWxkXS5wcm9jZXNzb3IucmVtb3ZlKG9sZERvYywgY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsLmlzTW9kaWZpZWQoZmllbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZSBhdHRhY2htZW50IGhhcyBiZWVuIG1vZGlmaWVkIGFuZCB0aGVyZSB3YXMgYW4gb2xkIG9uZSwgcmVtb3ZlIHRoZSBvbGQgdmVyc2lvblxuICAgICAgICAgICAgICAgICAgICB0YXNrcy5wdXNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5maWVsZHNbZmllbGRdLnByb2Nlc3Nvci5yZW1vdmUobW9kZWwuX19jYWNoZWRfYXR0YWNobWVudHNbZmllbGRdLCBjYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBhc3luYy5wYXJhbGxlbCh0YXNrcywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV4dChlcnJvcilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxufVxuIl19