"use strict";var _interopRequireDefault3 = require("@babel/runtime/helpers/interopRequireDefault");var _interopRequireDefault2 = _interopRequireDefault3(require("@babel/runtime/helpers/interopRequireDefault"));Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = undefined;var _classCallCheck2 = require("@babel/runtime/helpers/classCallCheck");var _classCallCheck = (0, _interopRequireDefault2["default"])(_classCallCheck2)["default"];var _createClass2 = require("@babel/runtime/helpers/createClass");var _createClass = (0, _interopRequireDefault2["default"])(_createClass2)["default"];var fs = require('fs');
var mv = require('mv');
var path = require('path');
var mkdirp = require('mkdirp');
var async = require('async');
var check = require('check-types');
var _ = require('underscore');var

LocalFsStorageProvider = /*#__PURE__*/function () {
  function LocalFsStorageProvider(options) {_classCallCheck(this, LocalFsStorageProvider);
    this._options = options;

    check.assert.object(this._options, 'Please pass some options to LocalFS');
    var dirCheck = _.isString(this._options.directory) || _.isFunction(this._options.directory);
    if (!dirCheck) {
      throw new Error('directory must be string or function');
    }
    if (!_.isFunction(this._options.path)) {
      this._options.path = function () {
        return '/' + path.basename(this.path);
      };
    }
  }_createClass(LocalFsStorageProvider, [{ key: "attachmentDir", value: function attachmentDir(

    attachment) {
      var dir = this._options.directory;
      if (_.isFunction(dir)) {
        dir = this._options.directory.apply(attachment);
      }
      return dir;
    } }, { key: "save", value: function save(

    model, attachment, callback) {var _this = this;
      var dir = this.attachmentDir(attachment);
      var target = null;
      async.series([
      function (callback) {
        var targetOrPromise = _this._options.path.apply(attachment);

        function onTargetReolved(target) {
          if (target.substring(0, dir.length) !== dir) {
            return callback(new Error('Will only store files under our storage directory'));
          }
          callback();
        }

        if (targetOrPromise && targetOrPromise.then) {
          return targetOrPromise.then(function (result) {
            target = path.resolve(path.join(dir, result));
            onTargetReolved(target);
          }, callback);
        } else {
          target = path.resolve(path.join(dir, targetOrPromise));
          onTargetReolved(target);
        }
      },
      function (callback) {
        mkdirp(dir, callback);
      }, function (callback) {
        if (attachment.path) {
          mv(attachment.path, target, callback);
        } else if (attachment.stream) {
          var writeStream = fs.createWriteStream(target);
          attachment.stream.once('error', callback);
          attachment.stream.pipe(writeStream).once('finish', function () {
            if (attachment.size) {
              return callback();
            }
            fs.stat(target, function (error, stats) {
              if (!error) {
                attachment.size = stats.size;
              }
              callback();
            });
          });
        } else if (attachment.buffer) {
          fs.writeFile(target, attachment.buffer, callback);
        }
      }], function (error) {
        callback(error, target);
      });
    } }, { key: "remove", value: function remove(

    attachment, callback) {
      if (!attachment.path) {
        return callback();
      }
      var dir = this.attachmentDir(attachment);
      if (attachment.path.substring(0, dir.length) !== dir) {
        return callback(new Error('Will not delete files that are not under our storage directory'));
      }
      fs.unlink(attachment.path, function (error) {
        if (error && error.code === 'ENOENT') {
          error = null;
        }
        callback(error);
      });
    } }]);return LocalFsStorageProvider;}();exports["default"] = LocalFsStorageProvider;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbGFzc2VzL0xvY2FsRnNTdG9yYWdlUHJvdmlkZXIuanMiXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwibXYiLCJwYXRoIiwibWtkaXJwIiwiYXN5bmMiLCJjaGVjayIsIl8iLCJMb2NhbEZzU3RvcmFnZVByb3ZpZGVyIiwib3B0aW9ucyIsIl9vcHRpb25zIiwiYXNzZXJ0Iiwib2JqZWN0IiwiZGlyQ2hlY2siLCJpc1N0cmluZyIsImRpcmVjdG9yeSIsImlzRnVuY3Rpb24iLCJFcnJvciIsImJhc2VuYW1lIiwiYXR0YWNobWVudCIsImRpciIsImFwcGx5IiwibW9kZWwiLCJjYWxsYmFjayIsImF0dGFjaG1lbnREaXIiLCJ0YXJnZXQiLCJzZXJpZXMiLCJ0YXJnZXRPclByb21pc2UiLCJvblRhcmdldFJlb2x2ZWQiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJ0aGVuIiwicmVzdWx0IiwicmVzb2x2ZSIsImpvaW4iLCJzdHJlYW0iLCJ3cml0ZVN0cmVhbSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwib25jZSIsInBpcGUiLCJzaXplIiwic3RhdCIsImVycm9yIiwic3RhdHMiLCJidWZmZXIiLCJ3cml0ZUZpbGUiLCJ1bmxpbmsiLCJjb2RlIl0sIm1hcHBpbmdzIjoieW1CQUFBLElBQUlBLEVBQUUsR0FBR0MsT0FBTyxDQUFDLElBQUQsQ0FBaEI7QUFDQSxJQUFJQyxFQUFFLEdBQUdELE9BQU8sQ0FBQyxJQUFELENBQWhCO0FBQ0EsSUFBSUUsSUFBSSxHQUFHRixPQUFPLENBQUMsTUFBRCxDQUFsQjtBQUNBLElBQUlHLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7QUFDQSxJQUFJSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxPQUFELENBQW5CO0FBQ0EsSUFBSUssS0FBSyxHQUFHTCxPQUFPLENBQUMsYUFBRCxDQUFuQjtBQUNBLElBQUlNLENBQUMsR0FBR04sT0FBTyxDQUFDLFlBQUQsQ0FBZixDOztBQUVxQk8sc0I7QUFDakIsa0NBQWFD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Q0FBWjtBQUNBLFVBQUlBLFVBQVUsQ0FBQ2hCLElBQVgsQ0FBZ0IwQixTQUFoQixDQUEwQixDQUExQixFQUE2QlQsR0FBRyxDQUFDVSxNQUFqQyxNQUE2Q1YsR0FBakQsRUFBc0Q7QUFDbEQsZUFBT0csUUFBUSxDQUFDLElBQUlOLEtBQUosQ0FBVSxnRUFBVixDQUFELENBQWY7QUFDSDtBQUNEakIsTUFBQUEsRUFBRSxDQUFDOEMsTUFBSCxDQUFVM0IsVUFBVSxDQUFDaEIsSUFBckIsRUFBMkIsVUFBQ3VDLEtBQUQsRUFBVztBQUNsQyxZQUFJQSxLQUFLLElBQUlBLEtBQUssQ0FBQ0ssSUFBTixLQUFlLFFBQTVCLEVBQXNDO0FBQ2xDTCxVQUFBQSxLQUFLLEdBQUcsSUFBUjtBQUNIO0FBQ0RuQixRQUFBQSxRQUFRLENBQUNtQixLQUFELENBQVI7QUFDSCxPQUxEO0FBTUgsSyw0REF6RmdCbEMsc0IiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZnMgPSByZXF1aXJlKCdmcycpXG52YXIgbXYgPSByZXF1aXJlKCdtdicpXG52YXIgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKVxudmFyIG1rZGlycCA9IHJlcXVpcmUoJ21rZGlycCcpXG52YXIgYXN5bmMgPSByZXF1aXJlKCdhc3luYycpXG52YXIgY2hlY2sgPSByZXF1aXJlKCdjaGVjay10eXBlcycpXG52YXIgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbEZzU3RvcmFnZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvciAob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc1xuXG4gICAgICAgIGNoZWNrLmFzc2VydC5vYmplY3QodGhpcy5fb3B0aW9ucywgJ1BsZWFzZSBwYXNzIHNvbWUgb3B0aW9ucyB0byBMb2NhbEZTJylcbiAgICAgICAgbGV0IGRpckNoZWNrID0gXy5pc1N0cmluZyh0aGlzLl9vcHRpb25zLmRpcmVjdG9yeSkgfHwgXy5pc0Z1bmN0aW9uKHRoaXMuX29wdGlvbnMuZGlyZWN0b3J5KVxuICAgICAgICBpZiAoIWRpckNoZWNrKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RpcmVjdG9yeSBtdXN0IGJlIHN0cmluZyBvciBmdW5jdGlvbicpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfLmlzRnVuY3Rpb24odGhpcy5fb3B0aW9ucy5wYXRoKSkge1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9ucy5wYXRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnLycgKyBwYXRoLmJhc2VuYW1lKHRoaXMucGF0aClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGF0dGFjaG1lbnREaXIgKGF0dGFjaG1lbnQpIHtcbiAgICAgICAgbGV0IGRpciA9IHRoaXMuX29wdGlvbnMuZGlyZWN0b3J5XG4gICAgICAgIGlmIChfLmlzRnVuY3Rpb24oZGlyKSkge1xuICAgICAgICAgICAgZGlyID0gdGhpcy5fb3B0aW9ucy5kaXJlY3RvcnkuYXBwbHkoYXR0YWNobWVudClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlyXG4gICAgfVxuXG4gICAgc2F2ZSAobW9kZWwsYXR0YWNobWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IGRpciA9IHRoaXMuYXR0YWNobWVudERpcihhdHRhY2htZW50KVxuICAgICAgICBsZXQgdGFyZ2V0ID0gbnVsbFxuICAgICAgICBhc3luYy5zZXJpZXMoW1xuICAgICAgICAgICAgKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHRhcmdldE9yUHJvbWlzZSA9IHRoaXMuX29wdGlvbnMucGF0aC5hcHBseShhdHRhY2htZW50KVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb25UYXJnZXRSZW9sdmVkICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5zdWJzdHJpbmcoMCwgZGlyLmxlbmd0aCkgIT09IGRpcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcignV2lsbCBvbmx5IHN0b3JlIGZpbGVzIHVuZGVyIG91ciBzdG9yYWdlIGRpcmVjdG9yeScpKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0T3JQcm9taXNlICYmIHRhcmdldE9yUHJvbWlzZS50aGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXRPclByb21pc2UudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQgPSBwYXRoLnJlc29sdmUocGF0aC5qb2luKGRpciwgcmVzdWx0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uVGFyZ2V0UmVvbHZlZCh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIH0sIGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHBhdGgucmVzb2x2ZShwYXRoLmpvaW4oZGlyLCB0YXJnZXRPclByb21pc2UpKVxuICAgICAgICAgICAgICAgICAgICBvblRhcmdldFJlb2x2ZWQodGFyZ2V0KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICBta2RpcnAoZGlyLCBjYWxsYmFjaylcbiAgICAgICAgICAgIH0sIChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhdHRhY2htZW50LnBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbXYoYXR0YWNobWVudC5wYXRoLCB0YXJnZXQsIGNhbGxiYWNrKVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXR0YWNobWVudC5zdHJlYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgd3JpdGVTdHJlYW0gPSBmcy5jcmVhdGVXcml0ZVN0cmVhbSh0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQuc3RyZWFtLm9uY2UoJ2Vycm9yJywgY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQuc3RyZWFtLnBpcGUod3JpdGVTdHJlYW0pLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhdHRhY2htZW50LnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soKVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZnMuc3RhdCh0YXJnZXQsIChlcnJvciwgc3RhdHMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQuc2l6ZSA9IHN0YXRzLnNpemVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dGFjaG1lbnQuYnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZzLndyaXRlRmlsZSh0YXJnZXQsIGF0dGFjaG1lbnQuYnVmZmVyLCBjYWxsYmFjaylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdGFyZ2V0KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJlbW92ZSAoYXR0YWNobWVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFhdHRhY2htZW50LnBhdGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGlyID0gdGhpcy5hdHRhY2htZW50RGlyKGF0dGFjaG1lbnQpXG4gICAgICAgIGlmIChhdHRhY2htZW50LnBhdGguc3Vic3RyaW5nKDAsIGRpci5sZW5ndGgpICE9PSBkaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ1dpbGwgbm90IGRlbGV0ZSBmaWxlcyB0aGF0IGFyZSBub3QgdW5kZXIgb3VyIHN0b3JhZ2UgZGlyZWN0b3J5JykpXG4gICAgICAgIH1cbiAgICAgICAgZnMudW5saW5rKGF0dGFjaG1lbnQucGF0aCwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyb3IgJiYgZXJyb3IuY29kZSA9PT0gJ0VOT0VOVCcpIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKVxuICAgICAgICB9KVxuICAgIH1cbn1cbiJdfQ==